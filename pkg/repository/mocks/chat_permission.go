// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/chat-service/pkg/repository/chat_permission.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/dev/sro/chat-service/pkg/repository/chat_permission.go -destination=/home/wil/dev/sro/chat-service/pkg/repository/mocks/chat_permission.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	chat "github.com/ShatteredRealms/chat-service/pkg/model/chat"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockChatChannelPermissionRepository is a mock of ChatChannelPermissionRepository interface.
type MockChatChannelPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatChannelPermissionRepositoryMockRecorder
	isgomock struct{}
}

// MockChatChannelPermissionRepositoryMockRecorder is the mock recorder for MockChatChannelPermissionRepository.
type MockChatChannelPermissionRepositoryMockRecorder struct {
	mock *MockChatChannelPermissionRepository
}

// NewMockChatChannelPermissionRepository creates a new mock instance.
func NewMockChatChannelPermissionRepository(ctrl *gomock.Controller) *MockChatChannelPermissionRepository {
	mock := &MockChatChannelPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockChatChannelPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatChannelPermissionRepository) EXPECT() *MockChatChannelPermissionRepositoryMockRecorder {
	return m.recorder
}

// AddForCharacter mocks base method.
func (m *MockChatChannelPermissionRepository) AddForCharacter(ctx context.Context, characterId *uuid.UUID, channelIds []*uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddForCharacter", ctx, characterId, channelIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddForCharacter indicates an expected call of AddForCharacter.
func (mr *MockChatChannelPermissionRepositoryMockRecorder) AddForCharacter(ctx, characterId, channelIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddForCharacter", reflect.TypeOf((*MockChatChannelPermissionRepository)(nil).AddForCharacter), ctx, characterId, channelIds)
}

// BanCharacter mocks base method.
func (m *MockChatChannelPermissionRepository) BanCharacter(ctx context.Context, characterId, channelId *uuid.UUID, until *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanCharacter", ctx, characterId, channelId, until)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanCharacter indicates an expected call of BanCharacter.
func (mr *MockChatChannelPermissionRepositoryMockRecorder) BanCharacter(ctx, characterId, channelId, until any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanCharacter", reflect.TypeOf((*MockChatChannelPermissionRepository)(nil).BanCharacter), ctx, characterId, channelId, until)
}

// GetAccessLevel mocks base method.
func (m *MockChatChannelPermissionRepository) GetAccessLevel(ctx context.Context, channelId, characterId *uuid.UUID) (chat.ChannelPermissionLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessLevel", ctx, channelId, characterId)
	ret0, _ := ret[0].(chat.ChannelPermissionLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessLevel indicates an expected call of GetAccessLevel.
func (mr *MockChatChannelPermissionRepositoryMockRecorder) GetAccessLevel(ctx, channelId, characterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLevel", reflect.TypeOf((*MockChatChannelPermissionRepository)(nil).GetAccessLevel), ctx, channelId, characterId)
}

// GetForCharacter mocks base method.
func (m *MockChatChannelPermissionRepository) GetForCharacter(ctx context.Context, characterId *uuid.UUID) (*chat.Channels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForCharacter", ctx, characterId)
	ret0, _ := ret[0].(*chat.Channels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForCharacter indicates an expected call of GetForCharacter.
func (mr *MockChatChannelPermissionRepositoryMockRecorder) GetForCharacter(ctx, characterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForCharacter", reflect.TypeOf((*MockChatChannelPermissionRepository)(nil).GetForCharacter), ctx, characterId)
}

// RemForCharacter mocks base method.
func (m *MockChatChannelPermissionRepository) RemForCharacter(ctx context.Context, characterId *uuid.UUID, channelIds []*uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemForCharacter", ctx, characterId, channelIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemForCharacter indicates an expected call of RemForCharacter.
func (mr *MockChatChannelPermissionRepositoryMockRecorder) RemForCharacter(ctx, characterId, channelIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemForCharacter", reflect.TypeOf((*MockChatChannelPermissionRepository)(nil).RemForCharacter), ctx, characterId, channelIds)
}

// SaveForCharacter mocks base method.
func (m *MockChatChannelPermissionRepository) SaveForCharacter(ctx context.Context, characterId *uuid.UUID, channelIds []*uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveForCharacter", ctx, characterId, channelIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveForCharacter indicates an expected call of SaveForCharacter.
func (mr *MockChatChannelPermissionRepositoryMockRecorder) SaveForCharacter(ctx, characterId, channelIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveForCharacter", reflect.TypeOf((*MockChatChannelPermissionRepository)(nil).SaveForCharacter), ctx, characterId, channelIds)
}
