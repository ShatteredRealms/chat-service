// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/chat-service/pkg/service/chat.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/sro/chat-service/pkg/service/chat.go -destination=/home/wil/sro/chat-service/pkg/service/mocks/chat.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	chat "github.com/ShatteredRealms/chat-service/pkg/model/chat"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
	isgomock struct{}
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// ReceiveChannelMessages mocks base method.
func (m *MockChatService) ReceiveChannelMessages(ctx context.Context, channelId, dimensionId, receiverCharacterId *uuid.UUID) (chan *chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveChannelMessages", ctx, channelId, dimensionId, receiverCharacterId)
	ret0, _ := ret[0].(chan *chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveChannelMessages indicates an expected call of ReceiveChannelMessages.
func (mr *MockChatServiceMockRecorder) ReceiveChannelMessages(ctx, channelId, dimensionId, receiverCharacterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveChannelMessages", reflect.TypeOf((*MockChatService)(nil).ReceiveChannelMessages), ctx, channelId, dimensionId, receiverCharacterId)
}

// ReceiveDirectMessages mocks base method.
func (m *MockChatService) ReceiveDirectMessages(ctx context.Context, targetCharacterId, receiverCharacterId *uuid.UUID) (chan *chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveDirectMessages", ctx, targetCharacterId, receiverCharacterId)
	ret0, _ := ret[0].(chan *chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveDirectMessages indicates an expected call of ReceiveDirectMessages.
func (mr *MockChatServiceMockRecorder) ReceiveDirectMessages(ctx, targetCharacterId, receiverCharacterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveDirectMessages", reflect.TypeOf((*MockChatService)(nil).ReceiveDirectMessages), ctx, targetCharacterId, receiverCharacterId)
}

// SendChannelMessage mocks base method.
func (m *MockChatService) SendChannelMessage(ctx context.Context, channelId, dimensionId *uuid.UUID, msg *chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelMessage", ctx, channelId, dimensionId, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendChannelMessage indicates an expected call of SendChannelMessage.
func (mr *MockChatServiceMockRecorder) SendChannelMessage(ctx, channelId, dimensionId, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelMessage", reflect.TypeOf((*MockChatService)(nil).SendChannelMessage), ctx, channelId, dimensionId, msg)
}

// SendDirectMessage mocks base method.
func (m *MockChatService) SendDirectMessage(ctx context.Context, targetCharacterId *uuid.UUID, msg *chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDirectMessage", ctx, targetCharacterId, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDirectMessage indicates an expected call of SendDirectMessage.
func (mr *MockChatServiceMockRecorder) SendDirectMessage(ctx, targetCharacterId, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectMessage", reflect.TypeOf((*MockChatService)(nil).SendDirectMessage), ctx, targetCharacterId, msg)
}

// Shutdown mocks base method.
func (m *MockChatService) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockChatServiceMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockChatService)(nil).Shutdown), ctx)
}
