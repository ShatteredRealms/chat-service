// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/chat-service/pkg/service/chat_log.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/sro/chat-service/pkg/service/chat_log.go -destination=/home/wil/sro/chat-service/pkg/service/mocks/chat_log.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	chat "github.com/ShatteredRealms/chat-service/pkg/model/chat"
	pb "github.com/ShatteredRealms/chat-service/pkg/pb"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockChatLogService is a mock of ChatLogService interface.
type MockChatLogService struct {
	ctrl     *gomock.Controller
	recorder *MockChatLogServiceMockRecorder
	isgomock struct{}
}

// MockChatLogServiceMockRecorder is the mock recorder for MockChatLogService.
type MockChatLogServiceMockRecorder struct {
	mock *MockChatLogService
}

// NewMockChatLogService creates a new mock instance.
func NewMockChatLogService(ctrl *gomock.Controller) *MockChatLogService {
	mock := &MockChatLogService{ctrl: ctrl}
	mock.recorder = &MockChatLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatLogService) EXPECT() *MockChatLogServiceMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockChatLogService) AddMessage(ctx context.Context, channelId, dimensionId *uuid.UUID, message *chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", ctx, channelId, dimensionId, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockChatLogServiceMockRecorder) AddMessage(ctx, channelId, dimensionId, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockChatLogService)(nil).AddMessage), ctx, channelId, dimensionId, message)
}

// GetMessages mocks base method.
func (m *MockChatLogService) GetMessages(ctx context.Context, request *pb.ChatLogRequest) (*chat.MessageLogs, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, request)
	ret0, _ := ret[0].(*chat.MessageLogs)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockChatLogServiceMockRecorder) GetMessages(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockChatLogService)(nil).GetMessages), ctx, request)
}
